{"version":3,"sources":["constants.js","helpers.js","Tile.js","Board.js","App.js","reportWebVitals.js","index.js"],"names":["BOARD_SIZE","isSolved","tiles","i","l","length","getMatrixPosition","index","row","Math","floor","col","shuffle","shuffledTiles","filter","t","sort","random","product","TILE_COUNT","j","round","isSolvable","Tile","props","tile","width","height","handleTileClick","visualPos","x","y","getVisualPosition","tileStyle","translateX","translateY","backgroundSize","backgroundPosition","motionStyle","spring","style","transform","opacity","className","onClick","Board","useState","Array","keys","setTiles","isStarted","setIsStarted","console","log","shuffleTiles","swapTiles","tileIndex","srcIndex","destIndex","srcRow","srcCol","destRow","destCol","abs","canSwap","indexOf","swappedTiles","src","dest","tilesResult","swap","pieceWidth","pieceHeight","hasWon","map","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ed931ef8.chunk.js","sourcesContent":["export const TILE_COUNT = 16;\nexport const GRID_SIZE = 4;\nexport const BOARD_SIZE = 320;","import { TILE_COUNT, GRID_SIZE } from \"./constants\"\n\n// Credits to https://codepen.io/unindented/pen/QNWdRQ\nexport function isSolvable(tiles) {\n  let product = 1;\n  for (let i = 1, l = TILE_COUNT - 1; i <= l; i++) {\n    for (let j = i + 1, m = l + 1; j <= m; j++) {\n      product *= (tiles[i - 1] - tiles[j - 1]) / (i - j);\n    }\n  }\n  return Math.round(product) === 1;\n}\n\nexport function isSolved(tiles) {\n  for (let i = 0, l = tiles.length; i < l; i++) {\n    if (tiles[i] !== i) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Get the linear index from a row/col pair.\nexport function getIndex(row, col) {\n  return parseInt(row, 10) * GRID_SIZE + parseInt(col, 10);\n}\n\n// Get the row/col pair from a linear index.\nexport function getMatrixPosition(index) {\n  return {\n    row: Math.floor(index / GRID_SIZE),\n    col: index % GRID_SIZE,\n  };\n}\n\nexport function getVisualPosition(row, col, width, height) {\n  return {\n    x: col * width,\n    y: row * height,\n  };\n}\n\nexport function shuffle(tiles) {\n  const shuffledTiles = [\n    ...tiles\n      .filter((t) => t !== tiles.length - 1)\n      .sort(() => Math.random() - 0.5),\n    tiles.length - 1,\n  ];\n  return isSolvable(shuffledTiles) && !isSolved(shuffledTiles)\n    ? shuffledTiles\n    : shuffle(shuffledTiles);\n}\n\nexport function canSwap(srcIndex, destIndex) {\n  const { row: srcRow, col: srcCol } = getMatrixPosition(srcIndex);\n  const { row: destRow, col: destCol } = getMatrixPosition(destIndex);\n  return Math.abs(srcRow - destRow) + Math.abs(srcCol - destCol) === 1;\n}\n\nexport function swap(tiles, src, dest) {\n  const tilesResult = [...tiles];\n  [tilesResult[src], tilesResult[dest]] = [tilesResult[dest], tilesResult[src]];\n  return tilesResult;\n}","import React from \"react\";\nimport { Motion, spring } from \"react-motion\";\nimport { getMatrixPosition, getVisualPosition } from \"./helpers\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"./constants\";\n\nfunction Tile(props) {\n  const { tile, index, width, height, handleTileClick } = props;\n\n  const { row, col } = getMatrixPosition(index);\n  const visualPos = getVisualPosition(row, col, width, height);\n  const tileStyle = {\n    width: `calc(100% / ${GRID_SIZE})`,\n    height: `calc(100% / ${GRID_SIZE})`,\n    translateX: visualPos.x,\n    translateY: visualPos.y,\n    // backgroundImage: `url(${imgUrl})`,\n    backgroundSize: `${BOARD_SIZE * 1.25}px`,\n    backgroundPosition: `${(100 / GRID_SIZE) * (tile % GRID_SIZE)}% ${\n      (100 / GRID_SIZE) * Math.floor(tile / GRID_SIZE)\n    }%`,\n  };\n  const motionStyle = {\n    translateX: spring(visualPos.x),\n    translateY: spring(visualPos.y),\n  };\n\n  return (\n    <Motion style={motionStyle}>\n      {({ translateX, translateY }) => (\n        <li\n          style={{\n            ...tileStyle,\n            transform: `translate3d(${translateX}px, ${translateY}px, 0)`,\n            // Is last tile?\n            opacity: tile === TILE_COUNT - 1 ? 0 : 1,\n          }}\n          className=\"tile\"\n          onClick={() => handleTileClick(index)}\n        >\n          {tile+1}\n        </li>\n      )}\n    </Motion>\n  );\n}\n\nexport default Tile;\n","import React, { useState } from \"react\";\nimport Tile from \"./Tile\";\nimport { TILE_COUNT, GRID_SIZE, BOARD_SIZE } from \"./constants\";\nimport { canSwap, shuffle, swap, isSolved } from \"./helpers\";\n\nfunction Board() {\n  const [tiles, setTiles] = useState([...Array(TILE_COUNT).keys()]);\n  const [isStarted, setIsStarted] = useState(false);\n  console.log(\"is started:\", isStarted);\n\n  const shuffleTiles = () => {\n    const shuffledTiles = shuffle(tiles);\n    setTiles(shuffledTiles);\n  };\n\n  const swapTiles = (tileIndex) => {\n    if (canSwap(tileIndex, tiles.indexOf(tiles.length - 1))) {\n      const swappedTiles = swap(\n        tiles,\n        tileIndex,\n        tiles.indexOf(tiles.length - 1)\n      );\n      setTiles(swappedTiles);\n    }\n  };\n\n  const handleTileClick = (index) => {\n    swapTiles(index);\n  };\n\n  const handleShuffleClick = () => {\n    shuffleTiles();\n  };\n\n  const handleStartClick = () => {\n    shuffleTiles();\n    setIsStarted(true);\n  };\n\n  const pieceWidth = Math.round(BOARD_SIZE / GRID_SIZE);\n  const pieceHeight = Math.round(BOARD_SIZE / GRID_SIZE);\n  const style = {\n    width: BOARD_SIZE,\n    height: BOARD_SIZE,\n  };\n  const hasWon = isSolved(tiles);\n\n  return (\n    <>\n      <ul style={style} className=\"board\">\n        {tiles.map((tile, index) => (\n          <Tile\n            key={tile}\n            index={index}\n            tile={tile}\n            width={pieceWidth}\n            height={pieceHeight}\n            handleTileClick={handleTileClick}\n          />\n        ))}\n      </ul>\n      {hasWon && isStarted && <div>Puzzle solved!</div>}\n      {!isStarted ? (\n        <button onClick={() => handleStartClick()}>Start game</button>\n      ) : (\n        <button onClick={() => handleShuffleClick()}>Restart game</button>\n      )}\n    </>\n  );\n}\n\nexport default Board;\n","import \"./App.css\";\nimport Board from \"./Board\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>15 PUZZLE</h1>\n      <Board />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}